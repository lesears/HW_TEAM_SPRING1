/*-------------------------------*/
/*      ARCH & GARCH Models      */
/*                               */
/*        Orange Team 7          */
/*-------------------------------*/

%let path = C:\Users\derri\Documents\NC State Classes\Financial Analysis Modeling\Homework2;
/* Load Needed Data */
proc import datafile = "&path.\stocks.csv"
	out = stocks dbms = csv replace;
	datarow = 3;
run;

/* Reset the Format to Avoid SGPLOT Warnings Later On */
data Stocks;
  set Stocks;
  Date = input(Index, anydtdte32.);
  format Date date7.;
  if Date >= "01FEB17"d and Date <= "08FEB19"d;
run; 

/*options symbolgen mprint mlogic;*/
%macro ARCH_Sig_Test (ticker=MSFT);

/* Add 10 Observations for Forecasting at End of Series */
data Stocks_&ticker.(drop=i);
	set Stocks end = eof;
	output;
	if eof then do i=1 to 5;
		if weekday(Date) in(2,3,4,5) then Date=Date+1;
		else Date=Date+3;
		&ticker._Close=.;
		&ticker._r=.;
		output;
	end;
run;


/* Fit Kernel Density-estimation on Log Returns*/
proc sgplot data=Stocks_&ticker.;
  title "&ticker.: Log Returns Kernel Density";
  density &ticker._r / type=kernel;
  keylegend / location=inside position=topright;
run;

/* Test for GARCH Effects and Normality */
ods output ARCHTest=&ticker._arch_test;
proc autoreg data=Stocks_&ticker./*all plots(unpack)*/;
   model &ticker._r =/ archtest normal;
run;

/*Take the arch outputs for each ticker and add a ticker label to each*/
data &ticker._arch_test;
	length Company $4;
	set &ticker._arch_test;
	Company = "&ticker.";
run;

/*Taking only the first order lag term from each data set*/
data &ticker._arch (drop=Model);
	set &ticker._arch_test;
	if Order =1;
run;



%mend ARCH_Sig_Test;

%ARCH_Sig_Test (ticker = AAPL)
%ARCH_Sig_Test (ticker = AXP)
%ARCH_Sig_Test (ticker = BA)
%ARCH_Sig_Test (ticker = CAT)
%ARCH_Sig_Test (ticker = CSCO)
%ARCH_Sig_Test (ticker = CVX)
%ARCH_Sig_Test (ticker = DIS)
%ARCH_Sig_Test (ticker = DWDP)
%ARCH_Sig_Test (ticker = GS)
%ARCH_Sig_Test (ticker = HD)
%ARCH_Sig_Test (ticker = IBM)
%ARCH_Sig_Test (ticker = INTC)
%ARCH_Sig_Test (ticker = JNJ)
%ARCH_Sig_Test (ticker = JPM)
%ARCH_Sig_Test (ticker = KO)
%ARCH_Sig_Test (ticker = MCD)
%ARCH_Sig_Test (ticker = MMM)
%ARCH_Sig_Test (ticker = MRK)
%ARCH_Sig_Test (ticker = MSFT)
%ARCH_Sig_Test (ticker = NKE)
%ARCH_Sig_Test (ticker = PFE)
%ARCH_Sig_Test (ticker = PG)
%ARCH_Sig_Test (ticker = TRV)
%ARCH_Sig_Test (ticker = UNH)
%ARCH_Sig_Test (ticker = UTX)
/*%ARCH_Sig_Test (ticker = V)*/
%ARCH_Sig_Test (ticker = VZ)
%ARCH_Sig_Test (ticker = WBA)
%ARCH_Sig_Test (ticker = WMT)
%ARCH_Sig_Test (ticker = XOM)
;


data All_arch_tests;
	set
	AAPL_arch
	AXP_arch
	BA_arch
	CAT_arch
	CSCO_arch
	CVX_arch
	DIS_arch
	DWDP_arch
	GS_arch
	HD_arch
	IBM_arch
	INTC_arch
	JNJ_arch
	JPM_arch
	KO_arch
	MCD_arch
	MMM_arch
	MRK_arch
	MSFT_arch
	NKE_arch
	PFE_arch
	PG_arch
	TRV_arch
	UNH_arch
	UTX_arch
/*	V_arch*/
	VZ_arch
	WBA_arch
	WMT_arch
	XOM_arch
	;
run;

proc sort data = All_arch_tests;
	by desending Q;
run;

proc sql inobs=5;
create table Top_5 as 
select Company
from All_arch_tests
; quit;

proc print data = Top_5;
run;


/*options symbolgen mprint mlogic;*/
%macro Top_5 (ticker=XOM);

/* Plot the Price Data */
proc sgplot data=Stocks_&ticker.;
  title "&ticker.: Price";
  series x=Date y=&ticker._Close;
  keylegend / location=inside position=topright;
  xaxis VALUES= ("01FEB2017"d to "15FEB2019"d by year);
run;

/* Plot the Returns Data */
proc sgplot data=Stocks_&ticker.;
  title "&ticker.: Log Returns";
  series x=Date y=&ticker._r;
  keylegend / location=inside position=topright;
  xaxis VALUES= ("01FEB2017"d to "15FEB2019"d by year);
run;

/* Estimate Different GARCH Models */
ods output FitSummary=fitsum_all_garch_models_&ticker.;
ods output ParameterEstimates = alpha_beta_&ticker.;
proc autoreg data=Stocks_&ticker. OUTEST=param_estimates;
   garch_n:   model &ticker._r = / noint garch=(p=1, q=1) method=ml; 
                            output out=&ticker._garch_n ht=&ticker._predicted_var;
   garch_t:   model &ticker._r =  / noint garch=(p=1, q=1) dist=t method=ml; 
                            output out=&ticker._garch_t ht=&ticker._predicted_var;
   egarch:    model &ticker._r = / noint garch=(p=1, q=1 ,type=exp ) method=ml;  
                            output out=&ticker._egarch ht=&ticker._predicted_var;
   qgarch_t:  model &ticker._r = / noint garch=(p=1, q=1, type=QGARCH) dist=t method=ml;
                            output out=&ticker._qgarch_t ht=&ticker._predicted_var;
   qgarch:    model &ticker._r = / noint garch=(p=1, q=1, type=QGARCH) method=ml;
                            output out=&ticker._qgarch ht=&ticker._predicted_var;
   garch_m:   model &ticker._r = / noint garch=(p=1, q=1, mean=linear) method=ml;
   							output out=&ticker._garch_m ht=&ticker._predicted_var;
   ewma:      model &ticker._r = / noint garch=(p=1, q=1, type=integ,noint) method=ml;
                            output out=&ticker._ewma ht=&ticker._predicted_var;
run;

/* Prepare Data for Plotting the Results */
data all_results_&ticker.;
  set &ticker._qgarch_t(in=a) &ticker._garch_t(in=b) &ticker._egarch(in=c) &ticker._qgarch_t(in=d) &ticker._garch_m(in=e) &ticker._ewma(in=f);
  format model $20.;
  if a then model="GARCH: Normal";
  if b then model="GARCH: T dist";
  else if c then model="Exp. GARCH";
  else if d then model="Quad. GARCH: T dist";
  else if e then model="GARCH Mean";
  else if f then model="EWMA";
run;

proc sort data=all_results_&ticker.;
  by model;
run;

/* Plot the Different Model Forecasts */
/*This lets you visualize the models that you tried in the previous step*/
title;
proc gplot data=all_results_&ticker. /*(where=(Date ge '01JAN2013'd))*/;
  plot (&ticker._predicted_var)*Date = model/ legend=legend1;
  plot &ticker._r*Date / legend=legend1;
  symbol1 i=join c=blue      w=2 v=none;
  symbol2 i=join c=green     w=2 v=none;
  symbol3 i=join c=red       w=2 v=none;
  symbol4 i=join c=magenta   w=2 v=none;
  symbol5 i=join c=black     w=2 v=none;
  symbol6 i=none c=purple    w=1 v=dot;
run;
quit;

/* Extract AIC, SBC and LIK measures */
data sbc_aic_lik_&ticker.;
   set fitsum_all_garch_models_&ticker.;
   keep Model SBC AIC Likelihood;
   if upcase(Label1)="SBC" then do; SBC=input(cValue1,BEST12.4); end;
   if upcase(Label2)="SBC" then do; SBC=input(cValue2,BEST12.4); end;
   if upcase(Label1)="AIC" then do; AIC=input(cValue1,BEST12.4); end;
   if upcase(Label2)="AIC" then do; AIC=input(cValue2,BEST12.4); end;
   if upcase(Label1)="LOG LIKELIHOOD" then do; Likelihood=input(cValue1,BEST12.4); end;
   if upcase(Label2)="LOG LIKELIHOOD" then do; Likelihood=input(cValue2,BEST12.4); end;
   if not ((SBC=.) and (Likelihood=.)) then output;
run;

data sbc_aic_lik_&ticker.;
	length Company $4;
	set sbc_aic_lik_&ticker.;
	Company = "&ticker.";
run;

/*Selecting the last 5 rows to get the predictions for each ticker*/
data Variance_values_&ticker. (keep = &ticker._predicted_var);
	set &ticker._qgarch_t;
	if &ticker._close = .;
run;

%mend Top_5;


%Top_5 (ticker = XOM)
%Top_5 (ticker = MSFT)
%Top_5 (ticker = MRK)
%Top_5 (ticker = CVX)
%Top_5 (ticker = UTX)
;


/*Create one data set with all the model Stats in one*/
data All_Model_stats;
	set
	sbc_aic_lik_XOM
	sbc_aic_lik_MSFT
	sbc_aic_lik_MRK
	sbc_aic_lik_CVX
	sbc_aic_lik_UTX
	;
run;


/*After veiwing the dataset that was made in the previous step,*/
/*we found that the qgarch_t model worked the best so we are going*/
/*to pull the stats for just that model.*/
data qgarch_t_models;
	set All_Model_stats;
	if Model = "qgarch_t";
run;


/*Merge the variance dataset horizontally to make it one table*/
data all_predicted_var;
	merge 
	Variance_values_XOM
	Variance_values_MSFT
	Variance_values_MRK
	Variance_values_CVX
	Variance_values_UTX;
run;

/*Merge all of the alpha and beta tables */
/*to get all of the information in one place*/
data alpha_beta_all;
	length Company $4;
	set alpha_beta_XOM (in=XOM)
	alpha_beta_MSFT (in=MSFT)
	alpha_beta_MRK (in=MRK)
	alpha_beta_CVX (in=CVX)
	alpha_beta_UTX (in=UTX)
	;
	where Model = "qgarch_t";
	if XOM then Company = "XOM";
	else if MSFT then Company = "MSFT";
	else if MRK then Company = "MRK";
	else if CVX then Company = "CVX";
	else if UTX then Company = "UTX";
	else Company = "";
run;

/*Part of the assignment that ask to sort by beta*/

data All_Betas;
	set alpha_beta_all;
	if Variable = "QARCHA1";
run;

proc sort data = All_betas;
	by descending Estimate;
run;

/*Part of the assignment that ask to sort by alpha*/
data All_Alphas;
	set alpha_beta_all;
	if Variable = "QARCHB1";
run;

proc sort data = All_Alphas;
	by descending Estimate;
run;


data stocks_project (keep = Index XOM_Close XOM_r MSFT_Close MSFT_r MRK_Close MRK_r CVX_Close CVX_r UTX_Close UTX_r);
	set Stocks;
run;


/*==================================================================*/
/* Historical Approach */

/* Reset the Format to Avoid SGPLOT Warnings Later On */
data stocks_project;
  set stocks_project;
  Date = input(Index,anydtdte32.);
  format Date date7.;
run; 

/* Calculate the Correlation Between the Stocks */
proc corr data=stocks_project cov out=Corr;
	var xom_r msft_r mrk_r cvx_r utx_r;
run; 

data Cov;
	set Corr;
	where _TYPE_='COV';
run;

data Mean;
	set Corr;
	where _TYPE_='MEAN';
run;

/* Optimization of Assets - Historical Variance/Covariance */
proc optmodel;
  
  /* Declare Sets and Parameters */
  set <str> Assets1, Assets2, Assets3;
  num Covariance{Assets1,Assets2};
  num Mean{Assets1};

  /* Read in SAS Data Sets */
  read data Cov into Assets1=[_NAME_];
  read data Cov into Assets2=[_NAME_] {i in Assets1}     
    <Covariance[I,_NAME_]=col(i)>;
  read data Mean into Assets3=[_NAME_] {i in Assets1} <Mean[i]=col(i)>;
  /* Declare Variables */
  var Proportion{Assets1} >= 0 init 0;

  /* Declare Objective Function */
  min Risk = sum{i in Assets1}
    (sum{j in Assets1}Proportion[i]*Covariance[i,j]*Proportion[j]);
  
  /* Declare Constraints */
  con Return: 0.0005 <= sum{i in Assets1}Proportion[i]*Mean[i];
  con Sum: 1 = sum{i in Assets1}Proportion[i];

  /* Call the Solver */
  solve;

  /* Print Solutions */
  print Covariance Mean;
  print Proportion; *‘Sum=’(sum{i in Assets1}Proportion[i]);

  /* Output Results */
  create data Weight_H from [Assets1] Proportion;

quit;




/*==================================================================*/
/* CAPM Approach */


/* Calculate DJI Mean and Variance for CAPM */
proc means data=stocks_project mean var;
	var DJI_r;
	output out=DJIX var=Var mean=Mean;
run;

/* Calculate CAPM Regressions for Stocks for 2014-2016 */
proc reg data=stocks_project outest=Coef;
	MSFT: model MSFT_r = DJI_r;
	xom: model xom_r = DJI_r;
	mrk: model mrk_r = DJI_r;
	cvx: model cvx_r = DJI_r;
	utx: model utx_r = DJI_r;
run;
quit;

/* Optimization of Assets - CAPM */
proc optmodel;
  
  /* Declare Sets and Parameters */
  set <str> Assets1;
  num Alpha{Assets1};
  num Beta{Assets1};
  num Sigma{Assets1};
  num MeanX;
  num VarX;

  /* Read in SAS Data Sets */
  read data Coef into Assets1=[_DEPVAR_] Alpha=col("Intercept");
  read data Coef into Assets1=[_DEPVAR_] Beta=col("DJI_r");
  read data Coef into Assets1=[_DEPVAR_] Sigma=col("_RMSE_");
  read data DJIX into MeanX=col("Mean");
  read data DJIX into VarX=col("Var");

  /* Declare Variables */
  var Proportion{Assets1} >= 0 init 0;

  /* Declare Objective Function */
  min Risk = sum{i in Assets1}Proportion[i]*Sigma[i]**2 
             + VarX*(sum{i in Assets1}Proportion[i]*Beta[i])**2;
  
  /* Declare Constraints */
  con Return: 0.0005 <= sum{i in Assets1}Proportion[i]*Alpha[i] 
                        + MeanX*(sum{i in Assets1}Proportion[i]*Beta[i]);
  con Sum: 1 = sum{i in Assets1}Proportion[i];

  /* Call the Solver */
  solve;

  /* Print Solutions */
  print Alpha Beta Sigma MeanX VarX;
  print Proportion;* ‘Sum=’(sum{i in Assets1}Proportion[i]);

  /* Output Results */
  create data Weight_C from [Assets1] Proportion;

quit;

/*==================================================================*/
/* GARCH Approach */


/* Add 5 Observations for Forecasting at End of Series */
data stocks_project(drop=i);
	set stocks_project end = eof;
	output;
	if eof then do i=1 to 5;
		if weekday(date) in(2,3,4,5) then date=date+1;
		else date=date+3;
    msft_p=.; msft_r=.;
	xom_p=.; xom_r=.;
	mrk_p=.; mrk_r=.;
	cvx_p=.; cvx_r=.;
	utx_p=.; utx_r=.;
    output;
  end;
run;

/* Estimate Different GARCH Models */
proc autoreg data=stocks_project;
   MSFT_qgarch_t:   model msft_r =  / garch=(p=1, q=1, type=QGARCH) dist=t method=ml maxiter=250;
                            output out=msft_qgarch_t ht=pred_var_msft;
   xom_qgarch_t:   model xom_r =  / garch=(p=1, q=1, type=QGARCH) dist=t method=ml maxiter=250;
                            output out=xom_qgarch_t ht=pred_var_xom;
   mrk_qgarch_t:  model mrk_r = / garch=(p=1, q=1, type=QGARCH) dist=t method=ml maxiter=250;
                            output out=mrk_qgarch_t ht=pred_var_mrk;
   cvx_qgarch_t:   model cvx_r = / garch=(p=1, q=1, type=QGARCH) dist=t method=ml maxiter=250;
                            output out=cvx_qgarch_t ht=pred_var_cvx;
   utx_qgarch_t:   model utx_r = / garch=(p=1, q=1, type=QGARCH) dist=t method=ml maxiter=250;
                            output out=utx_qgarch_t ht=pred_var_utx;

run;

/* Get New Forecasted Values for Variance */
data combined (keep=date pred_var_msft pred_var_xom pred_var_mrk pred_var_cvx pred_var_utx);
	merge msft_qgarch_t xom_qgarch_t mrk_qgarch_t cvx_qgarch_t utx_qgarch_t;
	if date <= '10FEB2019'd then delete;
run;

proc means data=combined median;
	var pred_var_msft pred_var_xom pred_var_mrk pred_var_cvx pred_var_utx;
	output out=P_GARCH median=p_MSFT p_xom p_mrk p_cvx p_utx;
run;

data _null_;
	set P_GARCH;
	call symput("msft_pred", p_MSFT);
	call symput("xom_pred", p_xom);
	call symput("mrk_pred", p_mrk);
	call symput("cvx_pred", p_cvx);
	call symput("utx_pred", p_utx);
run;

proc corr data=stocks_project cov out=Corr;
	var msft_r xom_r mrk_r cvx_r utx_r;
run;

data Cov;
	set Corr;
	where _TYPE_='COV';
run;

data Mean;
	set Corr;
	where _TYPE_='MEAN';
run;

data Cov;
	set Cov;
	if _NAME_="msft_r" then msft_r=&msft_pred;
	if _NAME_="xom_r" then xom_r=&xom_pred;
	if _NAME_="mrk_r" then mrk_r=&mrk_pred;
	if _NAME_="cvx_r" then cvx_r=&cvx_pred;
	if _NAME_="utx_r" then utx_r=&utx_pred;
run;

proc optmodel;
  
  /* Declare Sets and Parameters */
  set <str> Assets1, Assets2, Assets3;
  num Covariance{Assets1,Assets2};
  num Mean{Assets1};

  /* Read in SAS Data Sets */
  read data Cov into Assets1=[_NAME_];
  read data Cov into Assets2=[_NAME_] {i in Assets1}     
    <Covariance[I,_NAME_]=col(i)>;
  read data Mean into Assets3=[_NAME_] {i in Assets1} <Mean[i]=col(i)>;
  /* Declare Variables */
  var Proportion{Assets1} >= 0 init 0;

  /* Declare Objective Function */
  min Risk = sum{i in Assets1}
    (sum{j in Assets1}Proportion[i]*Covariance[i,j]*Proportion[j]);
  
  /* Declare Constraints */
  con Return: 0.0005 <= sum{i in Assets1}Proportion[i]*Mean[i];
  con Sum: 1 = sum{i in Assets1}Proportion[i];

  /* Call the Solver */
  solve;

  /* Print Solutions */
  print Covariance Mean;
  print Proportion;

  /* Output Results */
  create data Weight_G from [Assets1] Proportion;

quit;


/*===========================================*/
/************ Efficient Frontier *************/
/*===========================================*/

%let stocks= XOM_r MSFT_r MRK_r CVX_r UTX_r;

/*Create monthly returns*/
data _returns_;
  set stocks_project;
  month=month(date);
  year=year(date);
run;

proc sort data= _returns_;
by year month;
run;


proc means data=_returns_ sum noprint;
  var &stocks;
  by year month;
  output out=monthly_returns(drop=_type_ _freq_)  sum=&stocks;
  run;

/*Get the expected value of monthly returns*/
  proc means data=monthly_returns median noprint;
  var &stocks;
  output out=_expected_monthly_returns_(drop=_type_ _freq_) median=;
  run; 
  proc transpose data=_expected_monthly_returns_ 
        out=_expected_monthly_returns_(rename=(Col1=monthly_return));
  run;

/*Get the covariance matrix of monthly returns*/
  proc corr data=monthly_returns cov out=_cov_monthly_returns_ noprint;
  var &stocks;
  run;
  data _cov_monthly_returns_(drop=_type_);
  set _cov_monthly_returns_(where=(_type_ = "COV"));
  run;

/*Use OPTMODEL to setup and solve the minimum variance problem*/ 
  proc optmodel printlevel=0 FDIGITS=8;
  set <str> Stock_Symbols; 

  /*DECLARE OPTIMIZATION PARAMETERS*/  
  /*Expected return for each stock*/
  num expected_return_stock{Stock_Symbols};      
  /*Covariance matrix of stocks*/ 
  num Covariance{Stock_Symbols,Stock_Symbols};
  /*Required portfolio return: PARAMETER THAT WE WILL ANALYZE*/ 
  num Required_Portfolio_Return;   
  /*Range of parameter values*/ 
  set parameter_values = {0.0145 to 0.02 by 0.0001}; 

  /*OUTPUT*/
  /*Array to hold the value of the objective function*/
  num Portfolio_Stdev_Results{parameter_values};  
  /*Array to hold the value of the exp. return*/
  num Expected_Return{parameter_values};  
  /*Array to hold the value of the weights*/
  num Weights_Results{parameter_values,Stock_Symbols};  

  /* DECLARE OPTIMIZATION VARIABLES AND THEIR CONSTRAINTS*/
  /*Short positions are not allowed*/
  var weights{Stock_Symbols}>=0;    

  /* Declare implied variables (Optional)*/
  impvar exp_portf_return = sum{i in Stock_Symbols} expected_return_stock[i] * weights[i];

  /* Declare constraints */
  con c1: sum{i in Stock_Symbols} weights[i] = 1;
  con c2: exp_portf_return = Required_Portfolio_Return;

  /*READ INPUT DATA*/
  /*Read the expected monthly returns. The first column, _name_ holds the    */
  /*index of stock symbols we want to use; that's why we include it with [].*/ 
  read data work._expected_monthly_returns_ into Stock_Symbols=[_name_] expected_return_stock=monthly_return;
  /*Read the covariance matrix*/       
  read data work._cov_monthly_returns_ into [_name_] {j in Stock_Symbols} <Covariance[_name_,j]=col(j)>;

  /* DECLARE OBJECTIVE FUNCTION */ 
  min Portfolio_Stdev = 
     sum{i in Stock_Symbols, j in Stock_Symbols}Covariance[i,j] * weights[i] * weights[j];

  /*SOLVE THE PROBLEM FOR EACH PARAMETER VALUE*/
  for {r in parameter_values} do;
    /*Set the minimum portfolio return value to be used in each case*/
    Required_Portfolio_Return=r; 
    solve;
    /*Store the value of the objective function*/
    Portfolio_Stdev_Results[r]=Portfolio_Stdev; 
    /*Store the value of the expected returns*/ 
    Expected_Return[r]=exp_portf_return;
    /*Store the weights*/
    for {i in Stock_Symbols} do;
      Weights_Results[r,i]=weights[i];
    end;
  end;

   /*Store the portfolio return and std.dev from all runs in a SAS dataset*/
   create data obj_value_stddev_results from 
         [parameter_values] Portfolio_Stdev_Results Expected_Return;

   /*Store the weights from all runs in a SAS dataset*/ 
   create data min_stddev_weight_results from 
         [_param_ _stock_]={parameter_values , stock_symbols} Weights_Results;
quit;

/*Efficient Frontier*/
proc sgplot data=Obj_value_stddev_results;
title height=18pt "Efficient Frontier";
series x=Portfolio_Stdev_Results y=Expected_Return  / lineattrs=(color=blue THICKNESS= 2);
XAXIS labelattrs=(size=11) LABEL = 'Portfolio Volitality' valueattrs=(color=black size=9pt) offsetmin=0.05 offsetmax=0.05; 
YAXIS labelattrs=(size=11) LABEL = 'Expected Return' valueattrs=(color=black size=9pt) offsetmin=0.05 offsetmax=0.05; 
format Expected_Return PERCENT5.;
keylegend / location=inside position=bottomright valueattrs=(STYLE= ITALIC WEIGHT= BOLD);
quit;
